{"version":3,"file":"Paginator.js","sourceRoot":"","sources":["../../src/Paginator.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,OAAO,EAAE,SAAS,EAAE,KAAK,EAA2B,QAAQ,EAAE,MAAM,eAAe,CAAC;AACpF,OAAO,EAAE,SAAS,EAAa,MAAM,aAAa,CAAC;AACnD,OAAO,EAAE,YAAY,EAAE,MAAM,gBAAgB,CAAC;AAM9C;IAWI,mBACwB,aAAwB,EACpC,YAA0B;QAFtC,iBAGK;QAFmB,kBAAa,GAAb,aAAa,CAAW;QACpC,iBAAY,GAAZ,YAAY,CAAc;QAL/B,eAAU,GAAW,CAAC,CAAC;QAyBtB,2BAAsB,GAAG,UAAC,KAAgB;YAC9C,KAAI,CAAC,UAAU,GAAG,KAAK,CAAC,UAAU,CAAC;YACnC,KAAI,CAAC,UAAU,GAAG,KAAK,CAAC,UAAU,CAAC;YACnC,KAAI,CAAC,UAAU,GAAG,KAAK,CAAC,UAAU,CAAC;YACnC,KAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,IAAI,CAAC,KAAI,CAAC,UAAU,GAAG,KAAI,CAAC,UAAU,CAAC,CAAC;QACjE,CAAC,CAAC;IAxBE,CAAC;IAEE,+BAAW,GAAlB,UAAmB,OAAsC;QACrD,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,YAAY,IAAI,IAAI,CAAC,aAAa,CAAC;QACvD,IAAI,CAAC,sBAAsB,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC,CAAC;QACpD,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC,SAAS,CAAC,IAAI,CAAC,sBAAsB,CAAC,CAAC;IACrE,CAAC;IAEM,2BAAO,GAAd,UAAe,UAAkB;QAC7B,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,UAAU,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC;IACtD,CAAC;IAEM,iCAAa,GAApB,UAAqB,UAAkB;QACnC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,UAAU,EAAE,UAAU,CAAC,CAAC;QAClD,EAAE,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC;YACtB,IAAI,CAAC,YAAY,CAAC,aAAa,CAAC,UAAU,CAAC,QAAQ,EAAE,CAAC,CAAC;QAC3D,CAAC;IACL,CAAC;IA7BiB;QAAjB,KAAK,CAAC,SAAS,CAAC;kCAAe,SAAS;mDAAC;IACjB;QAAxB,KAAK,CAAC,gBAAgB,CAAC;;qDAAyB;IAHxC,SAAS;QAJrB,SAAS,CAAC;YACP,QAAQ,EAAE,aAAa;YACvB,QAAQ,EAAE,2BAA2B;SACxC,CAAC;QAaO,WAAA,QAAQ,EAAE,CAAA;yCAAwB,SAAS;YACtB,YAAY;OAb7B,SAAS,CAuCrB;IAAD,gBAAC;CAAA,AAvCD,IAuCC;SAvCY,SAAS","sourcesContent":["import { Component, Input, SimpleChange, OnChanges, Optional } from \"@angular/core\";\r\nimport { DataTable, PageEvent } from \"./DataTable\";\r\nimport { StateManager } from \"./StateManager\";\r\n\r\n@Component({\r\n    selector: \"mfPaginator\",\r\n    template: `<ng-content></ng-content>`\r\n})\r\nexport class Paginator implements OnChanges {\r\n\r\n    @Input(\"mfTable\") inputMfTable: DataTable;\r\n    @Input(\"saveRowsOnPage\") saveRowsOnPage: boolean;\r\n    private mfTable: DataTable;\r\n\r\n    public activePage: number;\r\n    public rowsOnPage: number;\r\n    public dataLength: number = 0;\r\n    public lastPage: number;\r\n\r\n    public constructor(\r\n        @Optional() private injectMfTable: DataTable,\r\n        private stateManager: StateManager\r\n    ) { }\r\n\r\n    public ngOnChanges(changes: {[key: string]: SimpleChange}): any {\r\n        this.mfTable = this.inputMfTable || this.injectMfTable;\r\n        this.onPageChangeSubscriber(this.mfTable.getPage());\r\n        this.mfTable.onPageChange.subscribe(this.onPageChangeSubscriber);\r\n    }\r\n\r\n    public setPage(pageNumber: number): void {\r\n        this.mfTable.setPage(pageNumber, this.rowsOnPage);\r\n    }\r\n\r\n    public setRowsOnPage(rowsOnPage: number): void {\r\n        this.mfTable.setPage(this.activePage, rowsOnPage);\r\n        if (this.saveRowsOnPage) {\r\n            this.stateManager.setPagination(rowsOnPage.toString());\r\n        }\r\n    }\r\n\r\n    private onPageChangeSubscriber = (event: PageEvent)=> {\r\n        this.activePage = event.activePage;\r\n        this.rowsOnPage = event.rowsOnPage;\r\n        this.dataLength = event.dataLength;\r\n        this.lastPage = Math.ceil(this.dataLength / this.rowsOnPage);\r\n    };\r\n}"]}